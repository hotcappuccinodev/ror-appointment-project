---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/reservations":
    get:
      summary: list reservations
      responses:
        '200':
          description: successful
  "/api/v1/reservations/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show reservation
      responses:
        '200':
          description: successful
  "/api/v1/vehicles/{vehicle_id}/reservations":
    parameters:
    - name: vehicle_id
      in: path
      description: vehicle_id
      required: true
      schema:
        type: string
    post:
      summary: create reservation
      responses:
        '200':
          description: successful
  "/api/v1/vehicles/{vehicle_id}/reservations/{id}":
    parameters:
    - name: vehicle_id
      in: path
      description: vehicle_id
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete reservation
      responses:
        '200':
          description: successful
  "/api/v1/users":
    get:
      summary: list users
      responses:
        '200':
          description: successful
  "/api/v1/vehicles":
    get:
      summary: list vehicles
      responses:
        '200':
          description: successful
    post:
      summary: create vehicle
      responses:
        '200':
          description: successful
  "/api/v1/vehicles/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show vehicle
      responses:
        '200':
          description: successful
    patch:
      summary: update vehicle
      responses:
        '200':
          description: successful
    put:
      summary: update vehicle
      responses:
        '200':
          description: successful
    delete:
      summary: delete vehicle
      responses:
        '200':
          description: successful
  "/users/":
    post:
      summary: create user
      tags:
      - Sign-up
      description: Creates a new user
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_login:
                  value:
                    status: Success
                    message: created users
                    data:
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                invalid_credentials:
                  value:
                    status: 500
                    message: Registration failed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                name:
                  type: string
                roles:
                  type: array
              required:
              - email
              - password
  "/users/sign_in":
    post:
      summary: create session
      tags:
      - Sign-in
      description: Authenticates an user and returns a jwt token
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_login:
                  value:
                    status: Success
                    message: signed in
                    data: "#<User:0x00000001073bcee8>"
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                invalid_credentials:
                  value:
                    status: failed
                    message: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
