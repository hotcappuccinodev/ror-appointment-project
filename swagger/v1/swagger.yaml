---
openapi: 3.0.1
info:
  title: API V1
  version: v1
  description: A friendly api to book vehicle reservations
paths:
  "/api/v1/reservations":
    get:
      summary: List all reservations for the user
      tags:
      - Reservation index
      description: Shows all the reservations for the current user
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_login:
                  value:
                    status: Success
                    message: signed in
                    data: "#<Reservation::ActiveRecord_Relation:0x000001376b3123a8>"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authentication_token:
                  type: string
              required:
              - authentication_token
  "/api/v1/vehicles/{vehicle_id}/reservations":
    post:
      summary: create reservation
      tags:
      - Reservation create
      description: Creates a new reservation
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_create_reservation:
                  value:
                    status: Success
                    message: created reservation
                    data: "#<Reservation:0x000001376b36fdf0>"
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                Failed_create_reservation:
                  value:
                    status: Failed
                    message: Failed to create a new reservation
                    data:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authentication_token:
                  type: string
                vehicle_id:
                  type: integer
                city:
                  type: string
                date:
                  type: string
              required:
              - authentication_token
              - city
              - date
  "/api/v1/users":
    get:
      summary: list all users
      tags:
      - Users index
      description: Shows all the users for the current user
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_login:
                  value:
                    status: Success
                    message: signed in
                    data: "#<User::ActiveRecord_Relation:0x0000013766550a98>"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authentication_token:
                  type: string
              required:
              - authentication_token
  "/api/v1/vehicles":
    get:
      summary: list vehicles
      tags:
      - vehicles
      - all
      description: List all vehicles
      parameters:
      - name: params
        in: query
        schema:
          type: object
          properties:
            authentication_token:
              type: string
          required:
          - authentication_token
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                success:
                  value:
                    status: Success
                    message: Loaded vehicles
                    data: "#<Vehicle::ActiveRecord_Relation:0x000001376576f668>"
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: You need to sign in or sign up before continuing.
    post:
      summary: create vehicle
      tags:
      - vehicle
      - create
      description: Creates a vehicle
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                success:
                  value:
                    status: Success
                    message: Created Vehicle
                    data: "#<Vehicle:0x00000137663f7138>"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authentication_token:
                  type: string
                brand:
                  type: string
                model:
                  type: string
                image:
                  type: string
                price:
                  type: decimal
                description:
                  type: text
              required:
              - authenticate_token
              - brand
              - model
              - image
              - price
              - description
  "/api/v1/vehicles/{id}":
    parameters:
    - name: id
      in: path
      description: vehicle id
      required: true
      schema:
        type: string
    get:
      summary: show vehicle
      tags:
      - vehicle
      - single
      description: Should retrieve single vehicle by id
      parameters:
      - name: params
        in: query
        schema:
          type: object
          properties:
            authentication_token:
              type: string
          required:
          - authentication_token
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                success:
                  value:
                    status: Success
                    message: Loaded vehicle
                    data:
                      id: 4
                      brand: BWM
                      model: BMW-30
                      price: '80.0'
                      image: image-bmw
                      description: good and lightspeed with low consumptiom
                      created_at: '2022-10-01T04:51:07.286Z'
                      updated_at: '2022-10-01T04:51:07.286Z'
    patch:
      summary: update vehicle
      tags:
      - vehicle
      - update-patch
      description: Should update single vehicle by id
      parameters:
      - name: params
        in: query
        schema:
          type: object
          properties:
            authentication_token:
              type: string
          required:
          - authentication_token
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                success:
                  value:
                    status: Success
                    message: Loaded vehicle
                    data:
                      id: 4
                      brand: BWM
                      model: BMW-30
                      price: '80.0'
                      image: image-bmw
                      description: good and lightspeed with low consumptiom
                      created_at: '2022-10-01T04:51:07.286Z'
                      updated_at: '2022-10-01T04:51:07.286Z'
    put:
      summary: update vehicle
      tags:
      - vehicle
      - update-put
      description: Should update single vehicle by id
      parameters:
      - name: params
        in: query
        schema:
          type: object
          properties:
            authentication_token:
              type: string
          required:
          - authentication_token
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                success:
                  value:
                    status: Success
                    message: Loaded vehicle
                    data:
                      id: 4
                      brand: BWM
                      model: BMW-30
                      price: '80.0'
                      image: image-bmw
                      description: good and lightspeed with low consumptiom
                      created_at: '2022-10-01T04:51:07.286Z'
                      updated_at: '2022-10-01T04:51:07.286Z'
    delete:
      summary: delete vehicle
      tags:
      - vehicle
      - delete
      description: Should delete single vehicle by id
      parameters:
      - name: params
        in: query
        schema:
          type: object
          properties:
            authentication_token:
              type: string
          required:
          - authentication_token
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                success:
                  value:
                    status: Success
                    message: Loaded vehicle
                    data:
                      id: 4
                      brand: BWM
                      model: BMW-30
                      price: '80.0'
                      image: image-bmw
                      description: good and lightspeed with low consumptiom
                      created_at: '2022-10-01T04:51:07.286Z'
                      updated_at: '2022-10-01T04:51:07.286Z'
  "/users/":
    post:
      summary: create user
      tags:
      - Sign-up
      description: Creates a new user
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_signup:
                  value:
                    status: Success
                    message: created users
                    data: "#<User:0x0000013768ce3ce0>"
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                Failed_SignUp:
                  value:
                    status: 500
                    message: Registration failed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                name:
                  type: string
                roles:
                  type: array
              required:
              - email
              - password
              - password_confirmation
              - name
              - roles
  "/users/sign_in":
    post:
      summary: create session
      tags:
      - Sign-in
      description: Authenticates an user and returns an authetication token
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successfull_login:
                  value:
                    status: Success
                    message: signed in
                    data: "#<User:0x0000013769745620>"
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                invalid_credentials:
                  value:
                    status: failed
                    message: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
